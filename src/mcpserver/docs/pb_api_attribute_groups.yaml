# PB-API Attribute Groups Configuration
# 
# Defines logical groupings of attributes that must be considered together,
# and API endpoint groups that return multiple attributes in a single call.
#
# Two types of groupings:
# 1. LOGICAL GROUPS: Attributes that only make sense when viewed together
# 2. API CALL GROUPS: Attributes that come from the same PB-API endpoint

attribute_groups:
  
  # LOGICAL GROUPS - Attributes that must be understood together
  
  delegation_complete_picture:
    description: "Complete delegation status - all amounts needed for full understanding"
    logical_group: true
    required_together: true
    attributes:
      - delegated_staked_amount_nhash      # ⭐ Earns rewards
      - delegated_rewards_amount_nhash     # ❌ No additional rewards  
      - delegated_redelegated_amount_nhash # ⭐ Earns rewards (21-day transition)
      - delegated_unbonding_amount_nhash   # ❌ No rewards (21-day unbonding)
      - delegated_total_amount_nhash       # Sum of all above
      - delegated_earning_amount_nhash     # Staked + redelegated  
      - delegated_not_earning_amount_nhash # Rewards + unbonding
    reasoning: "Delegation amounts are meaningless without the complete context of earning vs non-earning status"
    
  wallet_composition_complete:
    description: "Complete wallet composition - available vs delegated breakdown"
    logical_group: true
    required_together: true
    attributes:
      - available_total_amount_nhash
      - available_spendable_amount_nhash
      - available_committed_amount_nhash
      - available_unvested_amount_nhash
      - delegated_total_amount_nhash
      - wallet_total_amount_nhash
    reasoning: "Wallet composition requires both available and delegated amounts for complete picture"
    
  vesting_schedule_complete:
    description: "Complete vesting information - amounts and timeline"
    logical_group: true
    required_together: true
    attributes:
      - is_vesting
      - vesting_original_amount_nhash
      - vesting_total_vested_amount_nhash
      - vesting_total_unvested_amount_nhash
      - vesting_start_date
      - vesting_end_date
      - vesting_coverage_deficit_nhash
    reasoning: "Vesting information is incomplete without both amounts and timeline context"
    
  token_supply_ecosystem:
    description: "Complete HASH token supply distribution"
    logical_group: true
    required_together: true
    attributes:
      - max_supply_nhash
      - current_supply_nhash
      - burned_nhash
      - circulating_supply_nhash
      - community_pool_nhash
      - bonded_nhash
      - locked_nhash
    reasoning: "Token supply metrics need full distribution context to be meaningful"
    
  # DENOMINATION-DEPENDENT GROUPS - Attributes that require denomination context
  
  amount_with_denomination:
    description: "Amount values that are meaningless without denomination context"
    logical_group: true
    required_together: true
    denomination_dependent: true
    attributes:
      - amount_base_units
      - asset_denom
    reasoning: "Amount values without denomination are completely meaningless - must always be paired"
    
  vesting_amounts_with_denom:
    description: "Vesting amounts that require denomination context"
    logical_group: true
    required_together: true
    denomination_dependent: true
    attributes:
      - vesting_original_amount_nhash
      - vesting_total_vested_amount_nhash
      - vesting_total_unvested_amount_nhash
      - vesting_coverage_deficit_nhash
      # Note: denomination is embedded in field name (nhash suffix)
    reasoning: "Vesting amounts without knowing they are nhash units would be confusing"
    
  trading_amounts_with_pair:
    description: "Trading amounts that require trading pair context"
    logical_group: true
    required_together: true
    denomination_dependent: true
    attributes:
      - price_amount
      - volume_base_amount
      - volume_quote_amount
      - trading_pair_id
      - base_denom
      - quote_denom
    reasoning: "Trading amounts are meaningless without knowing which assets are being traded"
    
  multi_asset_balance_with_denom:
    description: "Asset balance that must include denomination identification"
    logical_group: true
    required_together: true
    denomination_dependent: true
    attributes:
      - amount_base_units
      - asset_denom
      - asset_display_name
      - asset_type
    reasoning: "Balance amount without knowing which asset it represents is useless"
    
  # API CALL GROUPS - Attributes that come from the same PB-API endpoint
  
api_call_groups:
  
  pb_account_info_call:
    description: "Account information from /api/v2/accounts/{address}"
    pb_api_url: "https://service-explorer.provenance.io/api/v2/accounts/{account_address}"
    pb_api_method: "GET"
    pb_api_parameters:
      - name: "account_address"
        type: "string"
        required: true
    
    # All attributes that come from this single API call
    available_attributes:
      - account_address
      - account_number  
      - sequence_number
      - is_vesting
      # Plus many other fields we don't want
      
    # Attributes we actually want to expose
    relevant_attributes:
      - account_address
      - account_number
      - sequence_number
      - is_vesting
      
    # Attributes we filter out to reduce noise
    filtered_out_attributes:
      - pub_key
      - "@type"
      - base_account
      - original_vesting
      - delegated_free
      - delegated_vesting
      - end_time
      - start_time
      # Many other internal fields
      
    reasoning: "Account info call returns extensive data, but we only need basic identification and vesting flag"
    
  pb_account_balances_call:
    description: "Account balances from /api/v2/accounts/{address}/balances"
    pb_api_url: "https://service-explorer.provenance.io/api/v2/accounts/{account_address}/balances"
    pb_api_method: "GET"
    pb_api_parameters:
      - name: "account_address"
        type: "string"
        required: true
      - name: "count"
        type: "integer"
        default: 20
      - name: "page" 
        type: "integer"
        default: 1
        
    available_attributes:
      - amount_nhash
      - amount_neth
      - amount_uusd
      - amount_uusdc
      - amount_nsol
      - amount_uxrp
      - amount_uylds
      # Plus pagination fields
      
    relevant_attributes:
      - amount_nhash
      - amount_neth
      - amount_uusd
      - amount_uusdc
      - amount_nsol
      - amount_uxrp
      - amount_uylds
      
    filtered_out_attributes:
      - page_request
      - pagination
      - total_count
      - page_number
      
    reasoning: "Balance call returns all assets, but we filter pagination metadata"
    
  pb_vesting_info_call:
    description: "Vesting information from /api/v3/accounts/{address}/vesting"
    pb_api_url: "https://service-explorer.provenance.io/api/v3/accounts/{account_address}/vesting"
    pb_api_method: "GET"
    pb_api_parameters:
      - name: "account_address"
        type: "string"
        required: true
        
    available_attributes:
      - vesting_original_amount_nhash
      - vesting_start_date
      - vesting_end_date
      - vesting_total_vested_amount_nhash      # Calculated
      - vesting_total_unvested_amount_nhash    # Calculated
      - date_time_result                       # Calculated
      # Plus internal vesting metadata
      
    relevant_attributes:
      - vesting_original_amount_nhash
      - vesting_start_date
      - vesting_end_date
      - vesting_total_vested_amount_nhash
      - vesting_total_unvested_amount_nhash
      - date_time_result
      
    filtered_out_attributes:
      - original_vesting_list
      - delegated_free
      - delegated_vesting
      - account
      
    reasoning: "Vesting call returns detailed internal data, but we need calculated amounts"
    
  pb_delegation_info_call:
    description: "Delegation information from hastra.fetch_total_delegation_data()"
    pb_api_url: "HASTRA_FUNCTION:fetch_total_delegation_data"
    pb_api_method: "FUNCTION_CALL"
    pb_api_parameters:
      - name: "wallet_address"
        type: "string"
        required: true
        
    available_attributes:
      - delegated_staked_amount_nhash
      - delegated_rewards_amount_nhash
      - delegated_redelegated_amount_nhash
      - delegated_unbonding_amount_nhash
      - delegated_total_amount_nhash           # Calculated
      - delegated_earning_amount_nhash         # Calculated
      - delegated_not_earning_amount_nhash     # Calculated
      
    relevant_attributes:
      - delegated_staked_amount_nhash
      - delegated_rewards_amount_nhash
      - delegated_redelegated_amount_nhash
      - delegated_unbonding_amount_nhash
      - delegated_total_amount_nhash
      - delegated_earning_amount_nhash
      - delegated_not_earning_amount_nhash
      
    filtered_out_attributes: []
    
    reasoning: "Delegation call returns exactly what we need - no filtering required"
    
  pb_hash_statistics_call:
    description: "HASH token statistics from /api/v3/utility_token/stats"
    pb_api_url: "https://service-explorer.provenance.io/api/v3/utility_token/stats"
    pb_api_method: "GET"
    pb_api_parameters: []
    
    available_attributes:
      - max_supply_nhash
      - current_supply_nhash
      - burned_nhash
      - circulating_supply_nhash
      - community_pool_nhash
      - bonded_nhash
      - locked_nhash                          # Calculated
      # Plus blockchain metadata
      
    relevant_attributes:
      - max_supply_nhash
      - current_supply_nhash
      - burned_nhash
      - circulating_supply_nhash
      - community_pool_nhash
      - bonded_nhash
      - locked_nhash
      
    filtered_out_attributes:
      - last_updated
      - block_height
      - validator_count
      - bonded_ratio
      
    reasoning: "Statistics call returns token distribution we need, but includes blockchain metadata we filter"
    
  fm_exchange_commitments_call:
    description: "Exchange commitments from /provenance/exchange/v1/commitments/account/{address}"
    pb_api_url: "https://api.provenance.io/provenance/exchange/v1/commitments/account/{account_address}"
    pb_api_method: "GET"
    pb_api_parameters:
      - name: "account_address"
        type: "string"
        required: true
        
    available_attributes:
      - available_committed_amount_nhash
      # Plus complex market and commitment metadata
      
    relevant_attributes:
      - available_committed_amount_nhash
      
    filtered_out_attributes:
      - market_id
      - commitments
      - pagination
      - market_details
      
    reasoning: "Commitments call returns complex exchange data, we only need HASH amount for market 1"

# MCP Function Groupings - How we expose these groups to AI agents

mcp_function_groups:
  
  account_essentials:
    description: "Essential account identification and status"
    mcp_function_name: "get_account_essentials"
    combines_api_calls:
      - pb_account_info_call
    returns_attributes:
      - account_address
      - account_number
      - sequence_number
      - is_vesting
    reasoning: "Basic account info needed for any account operation"
    
  account_complete_wallet:
    description: "Complete wallet composition with available and delegated breakdown"
    mcp_function_name: "get_complete_wallet_composition" 
    combines_api_calls:
      - pb_account_balances_call
      - pb_delegation_info_call
      - fm_exchange_commitments_call
    returns_logical_groups:
      - wallet_composition_complete
      - delegation_complete_picture
    reasoning: "Provides complete picture of where all HASH tokens are located"
    
  account_vesting_complete:
    description: "Complete vesting information with current status"
    mcp_function_name: "get_vesting_complete_info"
    combines_api_calls:
      - pb_account_info_call      # For is_vesting flag
      - pb_vesting_info_call      # For vesting details
    returns_logical_groups:
      - vesting_schedule_complete
    reasoning: "Vesting info only useful when complete with amounts and timeline"
    
  hash_ecosystem_overview:
    description: "Complete HASH token ecosystem statistics"
    mcp_function_name: "get_hash_ecosystem_overview"
    combines_api_calls:
      - pb_hash_statistics_call
    returns_logical_groups:
      - token_supply_ecosystem
    reasoning: "Token supply statistics need complete distribution context"

# Bandwidth and Confusion Reduction Rules

optimization_rules:
  
  bandwidth_reduction:
    description: "Filter out attributes that consume bandwidth without adding value"
    rules:
      - "Remove pagination metadata (page_request, pagination, total_count)"
      - "Remove internal API structure fields (@type, base_account)"
      - "Remove blockchain metadata not needed for token operations (block_height, validator_count)"
      - "Remove ratio fields that can be calculated if needed (bonded_ratio)"
      - "Remove redundant timestamp fields (last_updated when not specifically requested)"
      
  confusion_reduction:
    description: "Filter out attributes that could confuse AI agents"  
    rules:
      - "Remove technical validator details (consensus_pubkey, operator_address)"
      - "Remove complex nested structures that duplicate simpler fields"
      - "Remove legacy field names (isVesting vs is_vesting)"
      - "Remove fields with ambiguous names (delegated_free, delegated_vesting)"
      - "Standardize all amount fields to integer base units with denomination suffixes"

# Singular vs Plural Attribute Variants
# Some attributes can be returned as single values or lists depending on parameters

attribute_variants:
  
  trading_price_data:
    description: "Token price information - singular or multiple trades"
    base_attribute: "trading_matches"
    
    singular_variant:
      name: "latest_trade"
      description: "Most recent single trade information"
      parameters: 
        last_number_of_trades: 1
      structure: "object"
      fields:
        - trade_id
        - price_usd
        - volume_base
        - volume_quote
        - timestamp
        - trading_pair_id
      example_mcp_function: "get_latest_token_price"
      
    plural_variant:
      name: "recent_trades"
      description: "List of recent trade information"
      parameters:
        last_number_of_trades: "1-100"
      structure: "array"
      item_fields:
        - trade_id
        - price_usd
        - volume_base
        - volume_quote
        - timestamp
        - trading_pair_id
      example_mcp_function: "get_recent_token_trades"
      
    reasoning: "Price data can be single latest trade or historical list depending on use case"
  
  validator_delegation_data:
    description: "Delegation information - single validator or all validators"
    base_attribute: "validator_delegations"
    
    singular_variant:
      name: "validator_delegation"
      description: "Delegation to a specific validator"
      parameters:
        validator_address: "required"
      structure: "object"
      fields:
        - validator_address
        - delegated_amount_nhash
        - rewards_amount_nhash
        - redelegated_amount_nhash
        - unbonding_amount_nhash
      example_mcp_function: "get_delegation_to_validator"
      
    plural_variant:
      name: "all_validator_delegations"
      description: "Delegations to all validators for account"
      parameters:
        validator_address: "omitted"
      structure: "array"
      item_fields:
        - validator_address
        - validator_name
        - delegated_amount_nhash
        - rewards_amount_nhash
        - redelegated_amount_nhash
        - unbonding_amount_nhash
      example_mcp_function: "get_all_validator_delegations"
      
    reasoning: "Delegation data useful both for specific validator analysis and portfolio overview"
  
  transaction_history:
    description: "Transaction information - single transaction or history list"
    base_attribute: "transactions"
    
    singular_variant:
      name: "transaction_details"
      description: "Details of a specific transaction"
      parameters:
        transaction_hash: "required"
      structure: "object"
      fields:
        - transaction_hash
        - block_height
        - timestamp
        - transaction_type
        - amount_nhash
        - fees_nhash
        - status
      example_mcp_function: "get_transaction_details"
      
    plural_variant:
      name: "transaction_history"
      description: "List of recent transactions for account"
      parameters:
        account_address: "required"
        limit: "1-100"
        offset: "optional"
      structure: "array"
      item_fields:
        - transaction_hash
        - block_height
        - timestamp
        - transaction_type
        - amount_nhash
        - fees_nhash
        - status
      example_mcp_function: "get_account_transaction_history"
      
    reasoning: "Transaction data needed both for specific lookup and account activity analysis"
  
  asset_balance_data:
    description: "Asset balance information - single asset or all assets"
    base_attribute: "asset_balances"
    
    singular_variant:
      name: "single_asset_balance"
      description: "Balance for a specific asset denomination"
      parameters:
        asset_denom: "required (e.g., 'nhash', 'uusd.trading')"
      structure: "object"
      fields:
        - asset_denom
        - amount_base_units
        - amount_display
        - asset_type
      example_mcp_function: "get_asset_balance"
      
    plural_variant:
      name: "all_asset_balances"
      description: "Balances for all assets in account"
      parameters:
        asset_denom: "omitted"
      structure: "array"
      item_fields:
        - asset_denom
        - amount_base_units
        - amount_display
        - asset_type
      example_mcp_function: "get_all_asset_balances"
      
    reasoning: "Balance data useful for both specific asset queries and portfolio overview"

# Parameter-Driven Response Structure Rules

response_structure_rules:
  
  count_parameter_mapping:
    description: "How count/limit parameters affect response structure"
    rules:
      - parameter: "last_number_of_trades = 1"
        response_type: "singular"
        structure: "object"
        note: "Return single trade object, not array with one item"
        
      - parameter: "last_number_of_trades > 1"
        response_type: "plural" 
        structure: "array"
        note: "Return array of trade objects"
        
      - parameter: "limit = 1"
        response_type: "singular"
        structure: "object"
        note: "Return single item object when limit is 1"
        
      - parameter: "limit > 1 OR limit omitted"
        response_type: "plural"
        structure: "array"
        note: "Return array when multiple items requested or limit not specified"
  
  identifier_parameter_mapping:
    description: "How identifier parameters affect response structure"
    rules:
      - parameter: "validator_address provided"
        response_type: "singular"
        structure: "object"
        note: "Specific validator requested, return single validator object"
        
      - parameter: "validator_address omitted"
        response_type: "plural"
        structure: "array"
        note: "All validators requested, return array of validator objects"
        
      - parameter: "transaction_hash provided"
        response_type: "singular"
        structure: "object"
        note: "Specific transaction requested, return single transaction object"
        
      - parameter: "asset_denom provided"
        response_type: "singular"
        structure: "object"
        note: "Specific asset requested, return single asset balance object"

# MCP Function Naming Conventions for Variants

function_naming_conventions:
  
  singular_functions:
    prefix_patterns:
      - "get_latest_"     # For most recent single item
      - "get_current_"    # For current state single item  
      - "get_specific_"   # For identifier-based single item
      - "get_"           # Default for single item when context is clear
    examples:
      - "get_latest_token_price(token_pair)"
      - "get_current_hash_statistics()"
      - "get_specific_transaction(transaction_hash)"
      - "get_validator_delegation(account_address, validator_address)"
      
  plural_functions:
    prefix_patterns:
      - "get_recent_"     # For recent list of items
      - "get_all_"        # For complete list of items
      - "get_multiple_"   # For parameterized list of items
      - "list_"          # Alternative prefix for lists
    examples:
      - "get_recent_token_trades(token_pair, count=20)"
      - "get_all_validator_delegations(account_address)"
      - "get_multiple_transactions(account_address, limit=50)"
      - "list_account_assets(account_address)"
      
  parameter_indicators:
    singular_indicators:
      - "Functions with specific identifiers (hash, address, id)"
      - "Functions with count/limit = 1"
      - "Functions requesting 'latest' or 'current' state"
      
    plural_indicators:
      - "Functions with count/limit > 1 or omitted"
      - "Functions with 'recent', 'all', 'multiple' in name"
      - "Functions requesting historical or comprehensive data"

# Denomination Context Rules
# Critical rules for ensuring amounts are never returned without denomination context

denomination_context_rules:
  
  mandatory_pairings:
    description: "Attribute pairs that must ALWAYS be returned together"
    
    amount_denomination_pairs:
      - primary: "amount_base_units"
        required_context: ["asset_denom"]
        reasoning: "Raw amount number is meaningless without knowing the asset"
        
      - primary: "volume_amount"
        required_context: ["base_denom", "quote_denom"]
        reasoning: "Trading volume meaningless without knowing which assets"
        
      - primary: "price_amount"
        required_context: ["trading_pair_id", "base_denom", "quote_denom"]
        reasoning: "Price meaningless without knowing what is being priced in what"
        
      - primary: "fee_amount"
        required_context: ["fee_denom"]
        reasoning: "Fee amount without denomination is useless"
        
      - primary: "rewards_amount"
        required_context: ["rewards_denom"]
        reasoning: "Reward amount without knowing asset type is meaningless"
  
  embedded_denomination_fields:
    description: "Fields where denomination is embedded in the field name"
    
    nhash_suffixed_fields:
      pattern: "*_nhash"
      denomination: "nhash"
      examples:
        - "available_total_amount_nhash"
        - "delegated_staked_amount_nhash"
        - "vesting_original_amount_nhash"
      reasoning: "Field name includes denomination, no separate denom field needed"
      
    other_suffixed_fields:
      pattern: "*_{denom}"
      examples:
        - "amount_uusd" # for uusd.trading
        - "amount_neth" # for neth.figure.se
        - "amount_uusdc" # for uusdc.figure.se
      reasoning: "Field name includes denomination suffix for clarity"
  
  validation_rules:
    description: "Rules for validating denomination context completeness"
    
    amount_without_context_error:
      rule: "Any field containing 'amount' without denomination context should trigger error"
      exceptions:
        - "Fields with embedded denomination suffixes (*_nhash, *_uusd, etc.)"
        - "Fields that are counts/quantities, not monetary amounts"
      error_message: "Amount field '{field_name}' requires denomination context"
      
    denomination_consistency_check:
      rule: "All amounts in a group should use consistent denomination format"
      validation:
        - "Either all embedded (suffixed) OR all with separate denom fields"
        - "Don't mix 'amount_nhash' with 'amount + denom' in same response"
      error_message: "Inconsistent denomination format in response"

# Response Structure Templates for Denomination Context

denomination_response_templates:
  
  single_asset_amount:
    description: "Template for single asset amount with denomination"
    embedded_denomination:
      structure: |
        {
          "available_total_amount_nhash": 1000000000,
          "account_address": "tp1abc123"
        }
      reasoning: "Denomination embedded in field name - clear and unambiguous"
      
    separate_denomination:
      structure: |
        {
          "amount_base_units": 1000000000,
          "asset_denom": "nhash",
          "account_address": "tp1abc123"
        }
      reasoning: "Separate denomination field when field name doesn't include it"
  
  multi_asset_amounts:
    description: "Template for multiple asset amounts"
    embedded_denomination:
      structure: |
        {
          "available_amounts": {
            "amount_nhash": 1000000000,
            "amount_uusd": 500000,
            "amount_neth": 2000000000
          },
          "account_address": "tp1abc123"
        }
      reasoning: "Each amount field clearly indicates its denomination"
      
    separate_denomination:
      structure: |
        {
          "asset_balances": [
            {
              "amount_base_units": 1000000000,
              "asset_denom": "nhash"
            },
            {
              "amount_base_units": 500000,
              "asset_denom": "uusd.trading"
            }
          ],
          "account_address": "tp1abc123"
        }
      reasoning: "Array of objects, each with amount and denomination pair"
  
  trading_amounts:
    description: "Template for trading-related amounts with pair context"
    structure: |
      {
        "latest_trade": {
          "price_usd": 0.845,
          "volume_base_nhash": 1000000000,
          "volume_quote_usd": 845000000,
          "trading_pair_id": "HASH-USD",
          "base_denom": "nhash",
          "quote_denom": "uusd.trading",
          "timestamp": "2024-07-17T10:30:00Z"
        }
      }
    reasoning: "Trading data includes both pair context and individual denominations"

# Denomination Context Validation Functions

validation_functions:
  
  validate_denomination_context:
    description: "Validates that amounts have required denomination context"
    algorithm: |
      1. Scan response for fields containing "amount"
      2. Check if field has embedded denomination suffix
      3. If not, verify corresponding denomination field exists
      4. Validate denomination consistency across related fields
      5. Return validation result with any missing contexts
    
  add_missing_denomination_context:
    description: "Automatically adds denomination context where possible"
    algorithm: |
      1. Identify amount fields without context
      2. Attempt to infer denomination from field name patterns
      3. Add appropriate denomination fields or rename with suffixes
      4. Log any cases where context cannot be determined
    
  standardize_denomination_format:
    description: "Ensures consistent denomination format across response"
    algorithm: |
      1. Determine if response uses embedded or separate denomination format
      2. Convert all amount fields to use consistent format
      3. Apply field name transformations as needed
      4. Validate final response for denomination completeness