# PB-API Endpoint Mappings
# Declarative configuration defining the complete data flow:
# target_path ← source_path ← PB-API-json-return ← PB-API-URL + PB-API-parameter(s)
#
# Flow explanation:
# 1. PB-API-URL + PB-API-parameter(s) → HTTP request to Provenance Blockchain API
# 2. PB-API-json-return → Raw JSON response from PB API
# 3. source_path ← Extract specific field from PB-API-json-return  
# 4. target_path ← Transform and map to standardized field name

endpoints:
  
  # HASH Token Statistics (no parameters)
  hash_statistics:
    pb_api_url: "https://service-explorer.provenance.io/api/v3/utility_token/stats"
    pb_api_method: "GET"
    pb_api_parameters: []
    mcp_function_name: "get_hash_token_statistics"
    mcp_parameters: []
    
    field_mappings:
      # Direct amount field extractions (from {amount: "string", denom: "string"} to integer)
      - source_path: "maxSupply.amount"
        target_path: "max_supply_nhash"
        transform: "string_to_int"
        
      - source_path: "burned.amount" 
        target_path: "burned_nhash"
        transform: "string_to_int"
        
      - source_path: "currentSupply.amount"
        target_path: "current_supply_nhash" 
        transform: "string_to_int"
        
      - source_path: "circulation.amount"
        target_path: "circulating_supply_nhash"
        transform: "string_to_int"
        
      - source_path: "communityPool.amount"
        target_path: "community_pool_nhash"
        transform: "string_to_int"
        
      - source_path: "bonded.amount"
        target_path: "bonded_nhash"
        transform: "string_to_int"
    
    calculated_fields:
      - target_path: "locked_nhash"
        formula: "current_supply_nhash - circulating_supply_nhash - community_pool_nhash - bonded_nhash"
        
    excluded_fields:
      - "lastUpdated"
      - "blockHeight"
      - "validatorCount"
      - "bondedRatio"

  # Account Vesting Status 
  account_vesting_status:
    pb_api_url: "https://service-explorer.provenance.io/api/v2/accounts/{account_address}"
    pb_api_method: "GET" 
    pb_api_parameters:
      - name: "account_address"
        type: "string"
        required: true
        description: "Bech32-encoded Provenance account address"
        
    mcp_function_name: "get_account_vesting_status"
    mcp_parameters:
      - name: "account_address"
        type: "string"
        
    field_mappings:
      - source_path: "flags.isVesting"
        target_path: "is_vesting"
        transform: "direct"
        
    calculated_fields:
      - target_path: "account_address"
        formula: "PARAMETER:account_address"
        
  # Available HASH Balance
  available_hash_balance:
    pb_api_url: "https://service-explorer.provenance.io/api/v2/accounts/{account_address}/balances"
    pb_api_method: "GET"
    pb_api_parameters:
      - name: "account_address"
        type: "string" 
        required: true
      - name: "count"
        type: "integer"
        default: 20
      - name: "page"
        type: "integer"
        default: 1
        
    mcp_function_name: "get_available_hash_balance"
    mcp_parameters:
      - name: "account_address"
        type: "string"
        
    field_mappings:
      # Array search and extraction
      - source_path: "results[?denom=='nhash'].amount"
        target_path: "available_total_amount_nhash"
        transform: "string_to_int"
        array_filter:
          field: "denom"
          value: "nhash"
          
    calculated_fields:
      - target_path: "account_address"
        formula: "PARAMETER:account_address"
        
  # Asset Balances (multi-asset)
  asset_balances:
    pb_api_url: "https://service-explorer.provenance.io/api/v2/accounts/{account_address}/balances"
    pb_api_method: "GET"
    pb_api_parameters:
      - name: "account_address"
        type: "string"
        required: true
      - name: "count"
        type: "integer"
        default: 20
      - name: "page"
        type: "integer"
        default: 1
        
    mcp_function_name: "get_asset_balances"
    mcp_parameters:
      - name: "account_address"
        type: "string"
        
    array_mappings:
      source_array: "results"
      target_array: "asset_balances"
      item_mappings:
        - source_path: "denom"
          target_path: "asset_denom"
          transform: "direct"
          
        - source_path: "amount"
          target_path: "amount_{denom_suffix}"
          transform: "string_to_int"
          dynamic_field_name:
            template: "amount_{suffix}"
            suffix_mapping:
              "nhash": "nhash"
              "neth.figure.se": "neth"
              "uusd.trading": "uusd"
              "uusdc.figure.se": "uusdc"
              "nsol.figure.se": "nsol"
              "uxrp.figure.se": "uxrp"
              "uylds.fcc": "uylds"
              
    calculated_fields:
      - target_path: "account_address"
        formula: "PARAMETER:account_address"

  # Delegation Data
  delegation_data:
    pb_api_url: "HASTRA_FUNCTION:fetch_total_delegation_data"
    pb_api_method: "FUNCTION_CALL"
    pb_api_parameters:
      - name: "wallet_address"
        type: "string"
        required: true
        
    mcp_function_name: "get_delegation_data"
    mcp_parameters:
      - name: "account_address"
        type: "string"
        
    parameter_mappings:
      - mcp_param: "account_address"
        pb_param: "wallet_address"
        
    field_mappings:
      - source_path: "delegated_staked_amount"
        target_path: "delegated_staked_amount_nhash"
        transform: "ensure_int"
        
      - source_path: "delegated_redelegated_amount"
        target_path: "delegated_redelegated_amount_nhash"
        transform: "ensure_int"
        
      - source_path: "delegated_rewards_amount"
        target_path: "delegated_rewards_amount_nhash"
        transform: "ensure_int"
        
      - source_path: "delegated_unbonding_amount"
        target_path: "delegated_unbonding_amount_nhash"
        transform: "ensure_int"
        
      - source_path: "delegated_total_delegated_amount"
        target_path: "delegated_total_amount_nhash"
        transform: "ensure_int"
        
      - source_path: "delegated_earning_amount"
        target_path: "delegated_earning_amount_nhash"
        transform: "ensure_int"
        
      - source_path: "delegated_not_earning_amount"
        target_path: "delegated_not_earning_amount_nhash"
        transform: "ensure_int"
        
    calculated_fields:
      - target_path: "account_address"
        formula: "PARAMETER:account_address"

  # Vesting Information
  vesting_info:
    pb_api_url: "https://service-explorer.provenance.io/api/v3/accounts/{account_address}/vesting"
    pb_api_method: "GET"
    pb_api_parameters:
      - name: "account_address"
        type: "string"
        required: true
        
    mcp_function_name: "get_vesting_info"
    mcp_parameters:
      - name: "account_address"
        type: "string"
      - name: "date_time"
        type: "string"
        required: false
        description: "ISO 8601 timestamp (defaults to current time)"
        
    field_mappings:
      - source_path: "originalVestingList[0].amount"
        target_path: "vesting_original_amount_nhash"
        transform: "string_to_int"
        
      - source_path: "startTime"
        target_path: "vesting_start_date"
        transform: "direct"
        
      - source_path: "endTime"
        target_path: "vesting_end_date"
        transform: "direct"
        
    calculated_fields:
      - target_path: "account_address"
        formula: "PARAMETER:account_address"
        
      - target_path: "date_time_result"
        formula: "PARAMETER:date_time OR CURRENT_ISO_TIME"
        
      - target_path: "vesting_total_vested_amount_nhash"
        formula: "VESTING_CALCULATION:vested_amount"
        dependencies: ["vesting_original_amount_nhash", "vesting_start_date", "vesting_end_date", "date_time_result"]
        
      - target_path: "vesting_total_unvested_amount_nhash"
        formula: "vesting_original_amount_nhash - vesting_total_vested_amount_nhash"

  # Committed Amount
  committed_amount:
    pb_api_url: "https://api.provenance.io/provenance/exchange/v1/commitments/account/{account_address}"
    pb_api_method: "GET"
    pb_api_parameters:
      - name: "account_address"
        type: "string"
        required: true
        
    mcp_function_name: "get_committed_amount"
    mcp_parameters:
      - name: "account_address"
        type: "string"
        
    field_mappings:
      - source_path: "commitments[?market_id==1].amount[?denom=='nhash'].amount"
        target_path: "available_committed_amount_nhash"
        transform: "string_to_int"
        array_filter:
          nested: true
          filters:
            - path: "market_id"
              value: 1
            - path: "denom" 
              value: "nhash"
              
    calculated_fields:
      - target_path: "account_address"
        formula: "PARAMETER:account_address"

  # Figure Markets Assets
  fm_assets:
    pb_api_url: "https://figuremarkets.com/service-hft-exchange/api/v1/assets"
    pb_api_method: "GET"
    pb_api_parameters: []
    
    mcp_function_name: "get_figure_markets_assets"
    mcp_parameters: []
    
    array_mappings:
      source_array: "data"
      target_array: "assets"
      item_mappings:
        - source_path: "name"
          target_path: "asset_name"
          transform: "direct"
          
        - source_path: "description"
          target_path: "asset_description"
          transform: "direct"
          
        - source_path: "displayName"
          target_path: "asset_display_name"
          transform: "direct"
          
        - source_path: "type"
          target_path: "asset_type"
          transform: "direct"
          
        - source_path: "exponent"
          target_path: "asset_exponent"
          transform: "direct"
          
        - source_path: "provenanceMarkerName"
          target_path: "asset_denom"
          transform: "direct"

  # Trading Data
  trading_data:
    pb_api_url: "https://www.figuremarkets.com/service-hft-exchange/api/v1/markets"
    pb_api_method: "GET"
    pb_api_parameters: []
    
    mcp_function_name: "get_trading_pairs"
    mcp_parameters: []
    
    array_mappings:
      source_array: "data"
      target_array: "trading_pairs"
      item_mappings:
        - source_path: "id"
          target_path: "trading_pair_id"
          transform: "direct"
          
        - source_path: "denom"
          target_path: "base_denom"
          transform: "direct"
          
        - source_path: "quoteDenum"
          target_path: "quote_denom"
          transform: "direct"

  # Token Price Data
  token_prices:
    pb_api_url: "https://www.figuremarkets.com/service-hft-exchange/api/v1/trades/{token_pair}"
    pb_api_method: "GET"
    pb_api_parameters:
      - name: "token_pair"
        type: "string"
        required: true
        description: "Trading pair like 'HASH-USD'"
      - name: "size"
        type: "integer"
        default: 1
        description: "Number of trades to return"
        
    mcp_function_name: "get_token_prices"
    mcp_parameters:
      - name: "token_pair"
        type: "string"
        default: "HASH-USD"
      - name: "last_number_of_trades"
        type: "integer"
        default: 1
        
    parameter_mappings:
      - mcp_param: "last_number_of_trades"
        pb_param: "size"
        
    field_mappings:
      - source_path: "matches"
        target_path: "trading_matches"
        transform: "direct"
        
    calculated_fields:
      - target_path: "token_pair"
        formula: "PARAMETER:token_pair"

# Transform Functions Reference
transforms:
  direct: "Copy value as-is"
  string_to_int: "Convert string to integer"
  ensure_int: "Ensure value is integer (convert if string)"
  iso_timestamp: "Ensure ISO 8601 timestamp format"
  
# Special Formula Functions
formula_functions:
  PARAMETER: "Use parameter value from function call"
  CURRENT_ISO_TIME: "Current time as ISO 8601 string"
  VESTING_CALCULATION: "Apply vesting linear interpolation calculation"