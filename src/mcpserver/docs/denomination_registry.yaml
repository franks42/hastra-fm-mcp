# Denomination Registry and Conversion System
# 
# Comprehensive registry of all asset denominations with conversion factors,
# calculation vs display formats, and precision requirements.
#
# Key Concepts:
# - BASE DENOM: Smallest unit for calculations (integer, high precision)
# - DISPLAY DENOM: Human-readable unit for display (decimal, user-friendly)
# - CONVERSION FACTOR: Multiplier from base to display (base_amount / factor = display_amount)

assets:
  
  HASH:
    description: "Provenance Blockchain native utility token"
    
    denominations:
      base_denom:
        name: "nhash"
        full_name: "nano-HASH"
        description: "Base calculation unit (1 HASH = 1,000,000,000 nhash)"
        data_type: "integer"
        precision: "exact"
        use_for: "calculations"
        examples: [1000000000, 500000000, 1]
        
      display_denom:
        name: "HASH"
        full_name: "HASH"
        description: "Human-readable display unit"
        data_type: "decimal"
        precision: "9 decimal places"
        use_for: "display"
        examples: ["1.000000000", "0.500000000", "0.000000001"]
        
    conversion:
      base_to_display_factor: 1000000000
      formula: "display_amount = base_amount / 1000000000"
      reverse_formula: "base_amount = display_amount * 1000000000"
      
    field_naming:
      base_fields: ["*_nhash", "*_amount_nhash"]
      display_fields: ["*_hash", "*_amount_hash", "*_display"]
      
  ETH:
    description: "Ethereum from Figure Markets"
    
    denominations:
      base_denom:
        name: "neth.figure.se"
        full_name: "nano-ETH (Figure Markets)"
        description: "Base calculation unit (1 ETH = 1,000,000,000 neth)"
        data_type: "integer"
        precision: "exact"
        use_for: "calculations"
        examples: [1000000000, 500000000, 1]
        
      display_denom:
        name: "ETH"
        full_name: "Ethereum"
        description: "Human-readable display unit"
        data_type: "decimal"
        precision: "9 decimal places"
        use_for: "display"
        examples: ["1.000000000", "0.500000000", "0.000000001"]
        
    conversion:
      base_to_display_factor: 1000000000
      formula: "display_amount = base_amount / 1000000000"
      reverse_formula: "base_amount = display_amount * 1000000000"
      
    field_naming:
      base_fields: ["*_neth", "*_amount_neth"]
      display_fields: ["*_eth", "*_amount_eth", "*_display"]
      
  USD_TRADING:
    description: "USD for trading on Figure Markets"
    
    denominations:
      base_denom:
        name: "uusd.trading"
        full_name: "micro-USD (trading)"
        description: "Base calculation unit (1 USD = 1,000,000 uusd)"
        data_type: "integer"
        precision: "exact"
        use_for: "calculations"
        examples: [1000000, 500000, 1]
        
      display_denom:
        name: "USD"
        full_name: "US Dollar"
        description: "Human-readable display unit"
        data_type: "decimal"
        precision: "6 decimal places"
        use_for: "display"
        examples: ["1.000000", "0.500000", "0.000001"]
        
    conversion:
      base_to_display_factor: 1000000
      formula: "display_amount = base_amount / 1000000"
      reverse_formula: "base_amount = display_amount * 1000000"
      
    field_naming:
      base_fields: ["*_uusd", "*_amount_uusd"]
      display_fields: ["*_usd", "*_amount_usd", "*_display"]
      
  USDC:
    description: "USDC from Figure Markets"
    
    denominations:
      base_denom:
        name: "uusdc.figure.se"
        full_name: "micro-USDC (Figure Markets)"
        description: "Base calculation unit (1 USDC = 1,000,000 uusdc)"
        data_type: "integer"
        precision: "exact"
        use_for: "calculations"
        examples: [1000000, 500000, 1]
        
      display_denom:
        name: "USDC"
        full_name: "USD Coin"
        description: "Human-readable display unit"
        data_type: "decimal"
        precision: "6 decimal places"
        use_for: "display"
        examples: ["1.000000", "0.500000", "0.000001"]
        
    conversion:
      base_to_display_factor: 1000000
      formula: "display_amount = base_amount / 1000000"
      reverse_formula: "base_amount = display_amount * 1000000"
      
    field_naming:
      base_fields: ["*_uusdc", "*_amount_uusdc"]
      display_fields: ["*_usdc", "*_amount_usdc", "*_display"]
      
  SOL:
    description: "Solana from Figure Markets"
    
    denominations:
      base_denom:
        name: "nsol.figure.se"
        full_name: "nano-SOL (Figure Markets)"
        description: "Base calculation unit (1 SOL = 1,000,000,000 nsol)"
        data_type: "integer"
        precision: "exact"
        use_for: "calculations"
        examples: [1000000000, 500000000, 1]
        
      display_denom:
        name: "SOL"
        full_name: "Solana"
        description: "Human-readable display unit"
        data_type: "decimal"
        precision: "9 decimal places"
        use_for: "display"
        examples: ["1.000000000", "0.500000000", "0.000000001"]
        
    conversion:
      base_to_display_factor: 1000000000
      formula: "display_amount = base_amount / 1000000000"
      reverse_formula: "base_amount = display_amount * 1000000000"
      
    field_naming:
      base_fields: ["*_nsol", "*_amount_nsol"]
      display_fields: ["*_sol", "*_amount_sol", "*_display"]
      
  XRP:
    description: "XRP from Figure Markets"
    
    denominations:
      base_denom:
        name: "uxrp.figure.se"
        full_name: "micro-XRP (Figure Markets)"
        description: "Base calculation unit (1 XRP = 1,000,000 uxrp)"
        data_type: "integer"
        precision: "exact"
        use_for: "calculations"
        examples: [1000000, 500000, 1]
        
      display_denom:
        name: "XRP"
        full_name: "Ripple"
        description: "Human-readable display unit"
        data_type: "decimal"
        precision: "6 decimal places"
        use_for: "display"
        examples: ["1.000000", "0.500000", "0.000001"]
        
    conversion:
      base_to_display_factor: 1000000
      formula: "display_amount = base_amount / 1000000"
      reverse_formula: "base_amount = display_amount * 1000000"
      
    field_naming:
      base_fields: ["*_uxrp", "*_amount_uxrp"]
      display_fields: ["*_xrp", "*_amount_xrp", "*_display"]
      
  YLDS:
    description: "YLDS fund tokens"
    
    denominations:
      base_denom:
        name: "uylds.fcc"
        full_name: "micro-YLDS (FCC)"
        description: "Base calculation unit (1 YLDS = 1,000,000 uylds)"
        data_type: "integer"
        precision: "exact"
        use_for: "calculations"
        examples: [1000000, 500000, 1]
        
      display_denom:
        name: "YLDS"
        full_name: "YLDS Fund"
        description: "Human-readable display unit"
        data_type: "decimal"
        precision: "6 decimal places"
        use_for: "display"
        examples: ["1.000000", "0.500000", "0.000001"]
        
    conversion:
      base_to_display_factor: 1000000
      formula: "display_amount = base_amount / 1000000"
      reverse_formula: "base_amount = display_amount * 1000000"
      
    field_naming:
      base_fields: ["*_uylds", "*_amount_uylds"]
      display_fields: ["*_ylds", "*_amount_ylds", "*_display"]

# Denomination Mapping Tables

denomination_lookup:
  # Maps full denomination strings to asset info
  "nhash": 
    asset: "HASH"
    type: "base"
    conversion_factor: 1000000000
    
  "neth.figure.se":
    asset: "ETH"
    type: "base"
    conversion_factor: 1000000000
    
  "uusd.trading":
    asset: "USD_TRADING"
    type: "base"
    conversion_factor: 1000000
    
  "uusdc.figure.se":
    asset: "USDC"
    type: "base"
    conversion_factor: 1000000
    
  "nsol.figure.se":
    asset: "SOL"
    type: "base"
    conversion_factor: 1000000000
    
  "uxrp.figure.se":
    asset: "XRP"
    type: "base"
    conversion_factor: 1000000
    
  "uylds.fcc":
    asset: "YLDS"
    type: "base"
    conversion_factor: 1000000

suffix_lookup:
  # Maps field name suffixes to full denomination
  "_nhash": "nhash"
  "_neth": "neth.figure.se"
  "_uusd": "uusd.trading"
  "_uusdc": "uusdc.figure.se"
  "_nsol": "nsol.figure.se"
  "_uxrp": "uxrp.figure.se"
  "_uylds": "uylds.fcc"

# Conversion Rules and Validation

conversion_rules:
  
  calculation_requirements:
    description: "Rules for calculations requiring high precision"
    rules:
      - "Always use base denominations (integer) for financial calculations"
      - "Never perform calculations on display denominations (decimal)"
      - "Convert to base before any arithmetic operations"
      - "Only convert to display for final user presentation"
      
  display_requirements:
    description: "Rules for user-facing display"
    rules:
      - "Always show appropriate decimal places for asset type"
      - "Include asset symbol/name alongside amount"
      - "Use commas for thousands separators when appropriate"
      - "Show trailing zeros for clarity (1.000000 not 1)"
      
  precision_requirements:
    description: "Precision handling rules"
    rules:
      - "Base amounts: exact integer arithmetic only"
      - "Display amounts: round to asset-specific decimal places"
      - "Never lose precision by converting base to display and back"
      - "Use decimal.Decimal for display conversions to avoid float errors"

# Response Format Templates

response_templates:
  
  calculation_format:
    description: "Format for calculations and internal processing"
    example: |
      {
        "available_total_amount_nhash": 1000000000,
        "delegated_staked_amount_nhash": 500000000,
        "vesting_original_amount_nhash": 200000000
      }
    reasoning: "Integer base units ensure exact calculations"
    
  display_format:
    description: "Format for user display"
    example: |
      {
        "available_total_amount": {
          "base_units": 1000000000,
          "base_denom": "nhash",
          "display_amount": "1.000000000",
          "display_symbol": "HASH"
        }
      }
    reasoning: "Provides both calculation precision and display clarity"
    
  mixed_assets_format:
    description: "Format for multiple asset types"
    example: |
      {
        "asset_balances": [
          {
            "asset_symbol": "HASH",
            "base_units": 1000000000,
            "base_denom": "nhash",
            "display_amount": "1.000000000",
            "display_symbol": "HASH"
          },
          {
            "asset_symbol": "ETH",
            "base_units": 2000000000,
            "base_denom": "neth.figure.se",
            "display_amount": "2.000000000",
            "display_symbol": "ETH"
          }
        ]
      }
    reasoning: "Clear asset identification with both base and display formats"

# Validation and Error Handling

validation_rules:
  
  denomination_validation:
    description: "Validation rules for denomination handling"
    rules:
      - "Verify denomination exists in registry before processing"
      - "Validate conversion factors are positive integers"
      - "Ensure base amounts are always integers"
      - "Check display amounts don't exceed precision limits"
      
  conversion_validation:
    description: "Validation for denomination conversions"
    rules:
      - "Verify round-trip conversion preserves base amount"
      - "Check for integer overflow in base amounts"
      - "Validate decimal precision in display amounts"
      - "Ensure no loss of precision in calculations"
      
  field_naming_validation:
    description: "Validation for field naming consistency"
    rules:
      - "Verify field suffixes match registered denominations"
      - "Check for consistent use of base vs display naming"
      - "Validate asset identification in field names"
      - "Ensure no ambiguous denomination references"

error_messages:
  unknown_denomination: "Denomination '{denom}' not found in registry"
  invalid_conversion_factor: "Conversion factor must be positive integer"
  precision_loss: "Conversion would result in precision loss"
  invalid_base_amount: "Base amount must be integer"
  inconsistent_denomination: "Inconsistent denomination format in response"